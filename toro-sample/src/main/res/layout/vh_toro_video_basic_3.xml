<?xml version="1.0" encoding="utf-8"?>
<!--
  ~ Copyright 2016 eneim@Eneim Labs, nam@ene.im
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~        http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!--
android:descendantFocusability="blocksDescendants" is added to pass click event down to children
-->
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_margin="4dp"
    android:descendantFocusability="blocksDescendants"
    android:orientation="vertical"
    android:padding="4dp"
    >

  <!--

  Use android:background="?attr/selectableItemBackground" to show click-event indicator. So that
  you can see event if we are able to click to this Text, if we don't handle it, nothing happens.

  Normally, developer/designer may want to have the following behaviour: if widgets could not be
  clicked, show no indicator/touch feedback. Otherwise we have a fancy/good looking touch feedback
  to make users happy. This View, instead, show the touch feedback in EVERY CASES, so don't rely
  on this in Production. Simply remove the background if you don't want user to click on it.

  -->
  <TextView
      android:id="@+id/text"
      android:layout_width="match_parent"
      android:layout_height="wrap_content"
      android:background="?attr/selectableItemBackground"
      android:gravity="center_vertical"
      android:maxLines="4"
      android:padding="4dp"
      android:text="@string/sample"
      android:textAppearance="@style/TextAppearance.AppCompat.Body2"
      />

  <!--

  Generally VideoView is not visible if its height is set to wrap_content, so consider to give it a
  non-zero initial value. Ideally, if you have access to your Video's size at runtime, you can have
  more control to make the UI feel better.

  Here I use 192dp as for the ratio 16:9 of mainstream Videos with the plus/minus of UI measurement.
  This size will be automatically updated by the View.

  -->
  <im.ene.toro.exoplayer2.ExoVideoView
      android:id="@+id/video"
      android:layout_width="match_parent"
      android:layout_height="192dp"
      />

</LinearLayout>