/*
 * Copyright 2016 eneim@Eneim Labs, nam@ene.im
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.jfrog.bintray'

version = libraryVersion
version = libraryVersion
group = publishedGroupId

def isReleaseBuild() {
  return libraryVersion.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
      "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
      "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
  return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
  return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ""
}

afterEvaluate { project ->
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        pom.groupId = publishedGroupId
        pom.artifactId = artifact
        pom.version = libraryVersion

        repository(url: getReleaseRepositoryUrl()) {
          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
        }
        snapshotRepository(url: getSnapshotRepositoryUrl()) {
          authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
        }

        pom.project {
          packaging 'aar'
          groupId publishedGroupId
          artifactId artifact

          // Add your description here
          name libraryName
          description libraryDescription
          url siteUrl

          // Set your license
          licenses {
            license {
              name licenseName
              url licenseUrl
            }
          }
          developers {
            developer {
              id developerId
              name developerName
              email developerEmail
            }
          }
          scm {
            connection gitUrl
            developerConnection gitUrl
            url siteUrl
          }
        }
      }
    }
  }

  signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
  }
}

if (project.hasProperty("android")) {
  // Android libraries
  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
  }

  task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//        .plus(new File(rootProject.rootDir.absolutePath + "/ref/exoplayer-r1.5.10-javadoc.jar"))
//    classpath += configurations.javadocDeps
    source = android.sourceSets.main.java.source
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  }
} else {
  // Java libraries
  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  // archives javadocJar
  archives sourcesJar
}

// Bintray
// Properties properties = new Properties()
// properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
  user = bintray_user
  key = bintray_apikey

  configurations = ['archives']
  pkg {
    repo = bintrayRepo
    name = bintrayName
    desc = libraryDescription
    websiteUrl = siteUrl
    vcsUrl = gitUrl
    licenses = allLicenses
    publish = true
    publicDownloadNumbers = true
    version {
      desc = libraryDescription
      gpg {
        sign = isReleaseBuild() // Determines whether to GPG sign the files. The default is false
        passphrase = bintray_gpg_password
        // Optional. The passphrase for GPG signing'
      }
    }
  }
}